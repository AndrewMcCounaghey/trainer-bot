from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8259271597:AAE4tAwidRXXYW2DC2ISsjYjZpuIl6poGv8"

# –ö–Ω–æ–ø–∫–∏
# –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
exercises_button = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
], resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è"
contact_button = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ùì –°–≤—è–∑–∞—Ç—å—Å—è")]
], resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥"
exit_button = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")]
], resize_keyboard=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø TrainerBot. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message()
async def handle_buttons(message: types.Message):
    text = message.text

    if text == "üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    elif text == "‚ùì –°–≤—è–∑–∞—Ç—å—Å—è":
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n- –ü—Ä–∏–≤–µ—Ç\n- –ü–æ–º–æ—â—å\n- –í—ã—Ö–æ–¥")
    elif text == "üö™ –í—ã—Ö–æ–¥":
        await message.answer("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –ü–æ–∫–∞ üëã")
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.")


# –ó–∞–ø—É—Å–∫
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
