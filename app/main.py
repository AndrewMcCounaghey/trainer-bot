from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
import os
from dotenv import load_dotenv
import sqlite3

load_dotenv()

API_TOKEN = os.getenv("TRAINER_BOT_TOKEN")  # –¢–æ–∫–µ–Ω —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
DB_PATH = "trainerbot.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('PRAGMA foreign_keys = ON')
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        bot_token TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS muscle_groups (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        UNIQUE(user_id, name)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS exercises (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        muscle_group INTEGER,
        name TEXT,
        video TEXT,
        description TEXT,
        UNIQUE(user_id, name),
        FOREIGN KEY(muscle_group) REFERENCES muscle_groups(id) ON DELETE SET NULL
    )''')
    conn.commit()
    conn.close()

def set_user(telegram_id: int, username: str, bot_token: str = None):
    print(f"[DB] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}, username={username}, bot_token={bot_token}")
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''INSERT INTO users (telegram_id, username, bot_token) VALUES (?, ?, ?)
                 ON CONFLICT(telegram_id) DO UPDATE SET username=excluded.username, bot_token=excluded.bot_token''',
              (telegram_id, username, bot_token))
    conn.commit()
    conn.close()

def set_user_token(telegram_id: int, token: str):
    print(f"[DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {token}")
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE users SET bot_token=? WHERE telegram_id=?', (token, telegram_id))
    if c.rowcount == 0:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø—É—Å—Ç—ã–º username
        c.execute('INSERT INTO users (telegram_id, username, bot_token) VALUES (?, ?, ?)', (telegram_id, '', token))
        print(f"[DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—É—Å—Ç—ã–º username.")
    conn.commit()
    conn.close()

def get_user(telegram_id: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT username, bot_token FROM users WHERE telegram_id=?', (telegram_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {"username": row[0], "bot_token": row[1]}
    return None

# FSM
class BotSetup(StatesGroup):
    waiting_for_token = State()

class NavStates(StatesGroup):
    main = State()
    exercises = State()
    muscle_groups = State()

class MuscleFSM(StatesGroup):
    add = State()
    delete_select = State()
    delete_confirm = State()
    edit_select = State()
    edit_rename = State()

class ExerciseFSM(StatesGroup):
    add_select_muscle = State()
    add_name = State()
    add_video = State()
    add_desc = State()
    delete_select = State()
    edit_select = State()
    edit_field = State()
    edit_value = State()

# –ö–Ω–æ–ø–∫–∏
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
back_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

def get_main_menu(user_id):
    user = get_user(user_id)
    if user and user["bot_token"]:
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="ü§ñ –ú–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç")],
            [KeyboardButton(text="üí™ –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")],
            [KeyboardButton(text="üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã")],
        ], resize_keyboard=True)
    else:
        return main_menu

@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    set_user(user_id, username)
    menu = get_main_menu(user_id)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç–æ–º.", reply_markup=menu)

@dp.message(lambda message: message.text == "‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
async def ask_token(message: Message, state: FSMContext):
    instruction = (
        "üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–æ–∑–¥–∞–ª –≤ @BotFather.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π Telegram –∏ –Ω–∞–π–¥–∏ @BotFather.\n"
        "2. –ù–∞–∂–º–∏ /start –∏ –≤—ã–±–µ—Ä–∏ <b>New Bot</b> –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newbot.\n"
        "3. –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞.\n"
        "4. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è @BotFather –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ —Ç–æ–∫–µ–Ω ‚Äî —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ —Å—é–¥–∞.\n\n"
        "<i>–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:</i> <code>123456789:AA...xyz</code>"
    )
    await message.answer(instruction, reply_markup=back_menu, parse_mode=ParseMode.HTML)
    await state.set_state(BotSetup.waiting_for_token)

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    data = await state.get_data()
    prev = data.get("prev")
    if prev == NavStates.main.state or prev is None:
        await state.clear()
        menu = get_main_menu(message.from_user.id)
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu)
    elif prev == NavStates.exercises.state:
        await my_exercises(message, state)
    elif prev == NavStates.muscle_groups.state:
        await muscle_groups(message, state)
    else:
        await state.clear()
        menu = get_main_menu(message.from_user.id)
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu)

@dp.message(BotSetup.waiting_for_token)
async def save_token(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await go_back(message, state)
        return
    token = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or ""
    if len(token) < 30 or ":" not in token:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    set_user(user_id, username, token)
    menu = get_main_menu(user_id)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=menu)
    await state.clear()

from aiogram import Bot as AiogramBot

@dp.message(lambda message: message.text == "ü§ñ –ú–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç")
async def my_client_bot(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user or not user["bot_token"]:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞'.")
        return
    try:
        client_bot = AiogramBot(token=user["bot_token"])
        me = await client_bot.get_me()
        bot_username = me.username
        await client_bot.session.close()
        if bot_username:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url=f"https://t.me/{bot_username}")]
            ])
            await message.answer("–í–∞—à –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç", reply_markup=kb)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞: {e}")

@dp.message(lambda message: message.text == "üí™ –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def my_exercises(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ì—Ä—É–ø–ø—ã –º—ã—à—Ü"), KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    await state.set_state(NavStates.exercises)
    await state.update_data(prev=NavStates.main.state)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

@dp.message(lambda message: message.text == "–ì—Ä—É–ø–ø—ã –º—ã—à—Ü")
async def muscle_groups(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å"), KeyboardButton(text="‚ôªÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    await state.set_state(NavStates.muscle_groups)
    await state.update_data(prev=NavStates.exercises.state)
    await message.answer(
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ —Ç–µ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†—É–∫–∏, –ù–æ–≥–∏.",
        reply_markup=keyboard
    )

def get_muscle_groups(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT id, name FROM muscle_groups WHERE user_id=? ORDER BY name', (user_id,))
    rows = c.fetchall()
    conn.close()
    return rows  # [(id, name), ...]

def get_muscle_group_name(user_id, group_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT name FROM muscle_groups WHERE user_id=? AND id=?', (user_id, group_id))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def add_muscle_group(user_id, name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute('INSERT INTO muscle_groups (user_id, name) VALUES (?, ?)', (user_id, name))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def delete_muscle_group(user_id, name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM muscle_groups WHERE user_id=? AND name=?', (user_id, name))
    conn.commit()
    conn.close()

def rename_muscle_group(user_id, old_name, new_name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute('UPDATE muscle_groups SET name=? WHERE user_id=? AND name=?', (new_name, user_id, old_name))
        conn.commit()
        return c.rowcount > 0
    finally:
        conn.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add_muscle_start(message: Message, state: FSMContext):
    await state.set_state(MuscleFSM.add)
    await state.update_data(prev=NavStates.muscle_groups.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞:")

@dp.message(MuscleFSM.add)
async def add_muscle_save(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    if add_muscle_group(user_id, name):
        await message.answer(f"–ß–∞—Å—Ç—å —Ç–µ–ª–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"–ß–∞—Å—Ç—å —Ç–µ–ª–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await muscle_groups(message, state)

@dp.message(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å")
async def del_muscle_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    muscles = get_muscle_groups(user_id)
    await state.set_state(MuscleFSM.delete_select)
    await state.update_data(prev=NavStates.muscle_groups.state)
    if not muscles:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞.")
        await muscle_groups(message, state)
        return
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=name)] for _, name in muscles
    ] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(MuscleFSM.delete_select)
async def del_muscle_confirm(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    muscles = get_muscle_groups(user_id)
    if name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await muscle_groups(message, state)
        return
    if name not in [m[1] for m in muscles]:
        await message.answer("–¢–∞–∫–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    delete_muscle_group(user_id, name)
    await message.answer(f"–ß–∞—Å—Ç—å —Ç–µ–ª–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
    await muscle_groups(message, state)

@dp.message(lambda m: m.text == "‚ôªÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_muscle_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    muscles = get_muscle_groups(user_id)
    await state.set_state(MuscleFSM.edit_select)
    await state.update_data(prev=NavStates.muscle_groups.state)
    if not muscles:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞.")
        await muscle_groups(message, state)
        return
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=name)] for _, name in muscles
    ] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.message(MuscleFSM.edit_select)
async def edit_muscle_ask_new(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    muscles = get_muscle_groups(user_id)
    if name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await muscle_groups(message, state)
        return
    if name not in [m[1] for m in muscles]:
        await message.answer("–¢–∞–∫–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.set_state(MuscleFSM.edit_rename)
    await state.update_data(editing=name, prev=NavStates.muscle_groups.state)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è '{name}':")

@dp.message(MuscleFSM.edit_rename)
async def edit_muscle_save(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    old_name = data.get("editing")
    new_name = message.text.strip()
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    if old_name == new_name:
        await message.answer("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ:")
        return
    if not rename_muscle_group(user_id, old_name, new_name):
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å.")
    else:
        await message.answer(f"–ß–∞—Å—Ç—å —Ç–µ–ª–∞ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'.")
    await muscle_groups(message, state)

# --- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
def add_exercise(user_id, muscle_group_id, name, video, description):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute('INSERT INTO exercises (user_id, muscle_group, name, video, description) VALUES (?, ?, ?, ?, ?)',
                  (user_id, muscle_group_id, name, video, description))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def get_exercises(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT name FROM exercises WHERE user_id=? ORDER BY name', (user_id,))
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]

def get_exercise(user_id, name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT muscle_group, name, video, description FROM exercises WHERE user_id=? AND name=?', (user_id, name))
    row = c.fetchone()
    conn.close()
    return row

def delete_exercise(user_id, name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM exercises WHERE user_id=? AND name=?', (user_id, name))
    conn.commit()
    conn.close()

def update_exercise(user_id, old_name, muscle_group=None, name=None, video=None, description=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    fields = []
    values = []
    if muscle_group is not None:
        fields.append('muscle_group=?')
        values.append(muscle_group)
    if name is not None:
        fields.append('name=?')
        values.append(name)
    if video is not None:
        fields.append('video=?')
        values.append(video)
    if description is not None:
        fields.append('description=?')
        values.append(description)
    if not fields:
        conn.close()
        return False
    values.append(user_id)
    values.append(old_name)
    c.execute(f'UPDATE exercises SET {", ".join(fields)} WHERE user_id=? AND name=?', values)
    conn.commit()
    conn.close()
    return True

@dp.message(lambda m: m.text == "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def exercises_menu(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å"), KeyboardButton(text="‚ôªÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    await state.set_state(NavStates.exercises)
    await state.update_data(prev=NavStates.exercises.state)
    await message.answer(
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥—ä–µ–º –Ω–∞ –±–∏—Ü–µ–ø—Å.",
        reply_markup=keyboard
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å" and (state := FSMContext.get_current()) and state.state in [NavStates.exercises.state])
async def add_exercise_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    muscles = get_muscle_groups(user_id)
    if not muscles:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –º—ã—à—Ü.")
        await exercises_menu(message, state)
        return
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=f"{name} (id:{mid})")] for mid, name in muscles] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await state.set_state(ExerciseFSM.add_select_muscle)
    await state.update_data(prev=NavStates.exercises.state, muscle_map={f"{name} (id:{mid})": mid for mid, name in muscles})
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(ExerciseFSM.add_select_muscle)
async def add_exercise_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    muscle_map = data.get("muscle_map", {})
    muscle_key = message.text.strip()
    if muscle_key == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await exercises_menu(message, state)
        return
    if muscle_key not in muscle_map:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    muscle_id = muscle_map[muscle_key]
    await state.set_state(ExerciseFSM.add_name)
    await state.update_data(muscle=muscle_id, prev=NavStates.exercises.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")

@dp.message(ExerciseFSM.add_name)
async def add_exercise_video(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.set_state(ExerciseFSM.add_video)
    await state.update_data(name=name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

@dp.message(ExerciseFSM.add_video)
async def add_exercise_desc(message: Message, state: FSMContext):
    video = message.text.strip()
    if video.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        video = ""
    await state.set_state(ExerciseFSM.add_desc)
    await state.update_data(video=video)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

@dp.message(ExerciseFSM.add_desc)
async def add_exercise_save(message: Message, state: FSMContext):
    desc = message.text.strip()
    if desc.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        desc = ""
    data = await state.get_data()
    user_id = message.from_user.id
    ok = add_exercise(user_id, data["muscle"], data["name"], data["video"], desc)
    if ok:
        await message.answer(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        await message.answer(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await exercises_menu(message, state)

# --- –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
@dp.message(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å" and (state := FSMContext.get_current()) and state.state in [NavStates.exercises.state])
async def del_exercise_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = get_exercises(user_id)
    await state.set_state(ExerciseFSM.delete_select)
    await state.update_data(prev=NavStates.exercises.state)
    if not exercises:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        await exercises_menu(message, state)
        return
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=e)] for e in exercises] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(ExerciseFSM.delete_select)
async def del_exercise_confirm(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    exercises = get_exercises(user_id)
    if name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await exercises_menu(message, state)
        return
    if name not in exercises:
        await message.answer("–¢–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    delete_exercise(user_id, name)
    await message.answer(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{name}' —É–¥–∞–ª–µ–Ω–æ.")
    await exercises_menu(message, state)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
@dp.message(lambda m: m.text == "‚ôªÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" and (state := FSMContext.get_current()) and state.state in [NavStates.exercises.state])
async def edit_exercise_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = get_exercises(user_id)
    await state.set_state(ExerciseFSM.edit_select)
    await state.update_data(prev=NavStates.exercises.state)
    if not exercises:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        await exercises_menu(message, state)
        return
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=e)] for e in exercises] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.message(ExerciseFSM.edit_select)
async def edit_exercise_field(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    exercises = get_exercises(user_id)
    if name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await exercises_menu(message, state)
        return
    if name not in exercises:
        await message.answer("–¢–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.set_state(ExerciseFSM.edit_field)
    await state.update_data(editing=name, prev=NavStates.exercises.state)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü"), KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ")],
        [KeyboardButton(text="–í–∏–¥–µ–æ"), KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

@dp.message(ExerciseFSM.edit_field)
async def edit_exercise_value(message: Message, state: FSMContext):
    field = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    if field == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await edit_exercise_start(message, state)
        return
    if field not in ["–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–í–∏–¥–µ–æ", "–û–ø–∏—Å–∞–Ω–∏–µ"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.set_state(ExerciseFSM.edit_value)
    await state.update_data(edit_field=field, prev=NavStates.exercises.state)
    if field == "–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü":
        muscles = get_muscle_groups(user_id)
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=f"{name} (id:{mid})")] for mid, name in muscles] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await state.update_data(muscle_map={f"{name} (id:{mid})": mid for mid, name in muscles})
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=keyboard)
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':")

@dp.message(ExerciseFSM.edit_value)
async def edit_exercise_save(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    old_name = data.get("editing")
    field = data.get("edit_field")
    value = message.text.strip()
    if value == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await edit_exercise_field(message, state)
        return
    if field == "–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü":
        muscle_map = data.get("muscle_map", {})
        if value not in muscle_map:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        update_exercise(user_id, old_name, muscle_group=muscle_map[value])
        await message.answer(f"–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü –¥–ª—è '{old_name}' –∏–∑–º–µ–Ω–µ–Ω–∞.")
    elif field == "–ù–∞–∑–≤–∞–Ω–∏–µ":
        if not value:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        update_exercise(user_id, old_name, name=value)
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{value}'.")
    elif field == "–í–∏–¥–µ–æ":
        update_exercise(user_id, old_name, video=value)
        await message.answer(f"–í–∏–¥–µ–æ –¥–ª—è '{old_name}' –∏–∑–º–µ–Ω–µ–Ω–æ.")
    elif field == "–û–ø–∏—Å–∞–Ω–∏–µ":
        update_exercise(user_id, old_name, description=value)
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{old_name}' –∏–∑–º–µ–Ω–µ–Ω–æ.")
    await exercises_menu(message, state)

if __name__ == "__main__":
    init_db()
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
