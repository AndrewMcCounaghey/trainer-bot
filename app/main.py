from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
import os
from dotenv import load_dotenv
import sqlite3

load_dotenv()

API_TOKEN = os.getenv("TRAINER_BOT_TOKEN")  # –¢–æ–∫–µ–Ω —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
DB_PATH = "trainerbot.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        bot_token TEXT
    )''')
    conn.commit()
    conn.close()

def set_user(telegram_id: int, username: str, bot_token: str = None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''INSERT INTO users (telegram_id, username, bot_token) VALUES (?, ?, ?)
                 ON CONFLICT(telegram_id) DO UPDATE SET username=excluded.username, bot_token=excluded.bot_token''',
              (telegram_id, username, bot_token))
    conn.commit()
    conn.close()

def set_user_token(telegram_id: int, token: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE users SET bot_token=? WHERE telegram_id=?', (token, telegram_id))
    conn.commit()
    conn.close()

def get_user(telegram_id: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT username, bot_token FROM users WHERE telegram_id=?', (telegram_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {"username": row[0], "bot_token": row[1]}
    return None

# FSM
class BotSetup(StatesGroup):
    waiting_for_token = State()

# –ö–Ω–æ–ø–∫–∏
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
back_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    set_user(user_id, username)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç–æ–º.", reply_markup=main_menu)

@dp.message(lambda message: message.text == "‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
async def ask_token(message: Message, state: FSMContext):
    instruction = (
        "üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–æ–∑–¥–∞–ª –≤ @BotFather.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π Telegram –∏ –Ω–∞–π–¥–∏ @BotFather.\n"
        "2. –ù–∞–∂–º–∏ /start –∏ –≤—ã–±–µ—Ä–∏ <b>New Bot</b> –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newbot.\n"
        "3. –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞.\n"
        "4. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è @BotFather –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ —Ç–æ–∫–µ–Ω ‚Äî —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ —Å—é–¥–∞.\n\n"
        "<i>–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:</i> <code>123456789:AA...xyz</code>"
    )
    await message.answer(instruction, reply_markup=back_menu, parse_mode=ParseMode.HTML)
    await state.set_state(BotSetup.waiting_for_token)

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message(BotSetup.waiting_for_token)
async def save_token(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await go_back(message, state)
        return
    token = message.text.strip()
    user_id = message.from_user.id
    if len(token) < 30 or ":" not in token:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    set_user_token(user_id, token)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=main_menu)
    await state.clear()

if __name__ == "__main__":
    init_db()
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
